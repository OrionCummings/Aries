{
	"information_for_contributors": [
		"This file has been converted from https://github.com/jeff-hykin/better-c-syntax/blob/master/autogenerated/c.tmLanguage.json into a form that appropriately support the Aries programming language."
	],
	"version": "0.0.1",
	"name": "Aries",
	"scopeName": "source.ari",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#switch_statement"
		},
		{
			"include": "#control_keywords"
		},
		{
			"include": "#storage_types"
		},
		{
			"include": "#defs"
		},
		{
			"include": "#overload"
		},
		{
			"include": "#boolean_literals"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#block"
		},
		{
			"include": "#parens"
		},
		{
			"include": "#anon_pattern_range_7"
		},
		{
			"include": "#line_continuation_character"
		},
		{
			"include": "#anon_pattern_range_8"
		},
		{
			"include": "#array_brackets"
		},
		{
			"include": "#semicolon"
		},
		{
			"include": "#comma_delimiter"
		}
	],
	"repository": {
		"access-method": {
			"name": "meta.function-call.member.ari",
			"begin": "([a-zA-Z_][a-zA-Z_0-9]*|(?<=[\\]\\)]))\\s*(?:(\\.)|(->))((?:(?:[a-zA-Z_][a-zA-Z_0-9]*)\\s*(?:(?:\\.)|(?:->)))*)\\s*([a-zA-Z_][a-zA-Z_0-9]*)(\\()",
			"beginCaptures": {
				"1": {
					"name": "variable.object.ari"
				},
				"2": {
					"name": "punctuation.separator.dot-access.ari"
				},
				"3": {
					"name": "punctuation.separator.pointer-access.ari"
				},
				"4": {
					"patterns": [
						{
							"match": "\\.",
							"name": "punctuation.separator.dot-access.ari"
						},
						{
							"match": "->",
							"name": "punctuation.separator.pointer-access.ari"
						},
						{
							"match": "[a-zA-Z_][a-zA-Z_0-9]*",
							"name": "variable.object.ari"
						},
						{
							"name": "everything.else.ari",
							"match": ".+"
						}
					]
				},
				"5": {
					"name": "entity.name.function.member.ari"
				},
				"6": {
					"name": "punctuation.section.arguments.begin.bracket.round.function.member.ari"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.arguments.end.bracket.round.function.member.ari"
				}
			},
			"patterns": [
				{
					"include": "#function-call-innards"
				}
			]
		},
		"control_keywords": {
			"match": "\\b(break|continue|else|for|if|return|while)\\b",
			"name": "keyword.control.ari"
		},
		"semicolon": {
			"match": ";",
			"name": "punctuation.terminator.statement.ari"
		},
		"comma_delimiter": {
			"match": ",",
			"name": "punctuation.separator.delimiter.ari"
		},
		"defs": {
			"match": "\\b(^def)\\b",
			"name": "keyword.other.def.ari"
		},
		"overload": {
			"match": "\\b(overload)\\b",
			"name": "keyword.other.def.ari"
		},
		"variable_modifiers": {
			"match": "\\b(const|static)\\b",
			"name": "storage.modifier.ari"
		},
		"boolean_literals": {
			"match": "\\b(true|false|TRUE|FALSE|True|False)\\b",
			"name": "constant.language.ari"
		},
		"anon_pattern_range_7": {
			"name": "meta.function.ari",
			"begin": "(?<!\\w)(?!\\s*(?:struct|static|return|switch|sizeof|const|false|while|float|break|case|else|bool|enum|uint|true|void|char|for|int|if)\\s*\\()(?=[a-zA-Z_]\\w*\\s*\\()",
			"end": "(?!\\G)(?<=\\))",
			"patterns": [
				{
					"include": "#function-innards"
				}
			]
		},
		"anon_pattern_range_8": {
			"name": "meta.bracket.square.access.ari",
			"begin": "([a-zA-Z_][a-zA-Z_0-9]*|(?<=[\\]\\)]))?(\\[)(?!\\])",
			"beginCaptures": {
				"1": {
					"name": "variable.object.ari"
				},
				"2": {
					"name": "punctuation.definition.begin.bracket.square.ari"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.end.bracket.square.ari"
				}
			},
			"patterns": [
				{
					"include": "#function-call-innards"
				}
			]
		},
		"array_brackets": {
			"name": "storage.modifier.array.bracket.square.ari",
			"match": "\\[\\s*\\]"
		},
		"backslash_escapes": {
			"match": "(?x)\\\\ (\n\\\\\t\t\t |\n[abefnprtv'\"?]   |\n[0-3][0-7]{,2}\t |\n[4-7]\\d?\t\t|\nx[a-fA-F0-9]{,2} |\nu[a-fA-F0-9]{,4} |\nU[a-fA-F0-9]{,8} )",
			"name": "constant.character.escape.ari"
		},
		"block": {
			"patterns": [
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.block.begin.bracket.curly.ari"
						}
					},
					"end": "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.block.end.bracket.curly.ari"
						}
					},
					"name": "meta.block.ari",
					"patterns": [
						{
							"include": "#block_innards"
						}
					]
				}
			]
		},
		"block_comment": {
			"patterns": [
				{
					"begin": "\\s*+(\\/\\*)",
					"end": "\\*\\/",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.comment.begin.ari"
						}
					},
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.end.ari"
						}
					},
					"name": "comment.block.ari"
				},
				{
					"begin": "\\s*+(\\/\\*)",
					"end": "\\*\\/",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.comment.begin.ari"
						}
					},
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.end.ari"
						}
					},
					"name": "comment.block.ari"
				}
			]
		},
		"block_innards": {
			"patterns": [
				{
					"include": "#method_access"
				},
				{
					"include": "#member_access"
				},
				{
					"include": "#c_function_call"
				},
				{
					"name": "meta.initialization.ari",
					"begin": "(?x)\n(?:\n  (?:\n\t(?=\\s)(?<!else|new|return)\n\t(?<=\\w) \\s+(and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|typeid|xor|xor_eq|alignof|alignas)  # or word + space before name\n  )\n)\n(\n  (?:[A-Za-z_][A-Za-z0-9_]*+ | :: )++   # actual name\n  |\n  (?:(?<=operator) (?:[-*&<>=+!]+ | \\(\\) | \\[\\]))\n)\n\\s*(\\() # opening bracket",
					"beginCaptures": {
						"1": {
							"name": "variable.other.ari"
						},
						"2": {
							"name": "punctuation.section.parens.begin.bracket.round.initialization.ari"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.parens.end.bracket.round.initialization.ari"
						}
					},
					"patterns": [
						{
							"include": "#function-call-innards"
						}
					]
				},
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.block.begin.bracket.curly.ari"
						}
					},
					"end": "}|(?=\\s*#\\s*(?:elif|else|endif)\\b)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.block.end.bracket.curly.ari"
						}
					},
					"patterns": [
						{
							"include": "#block_innards"
						}
					]
				},
				{
					"include": "#parens-block"
				},
				{
					"include": "$self"
				}
			]
		},
		"c_conditional_context": {
			"patterns": [
				{
					"include": "$self"
				},
				{
					"include": "#block_innards"
				}
			]
		},
		"c_function_call": {
			"begin": "(?x)\n(?!(?:while|for|do|if|else|switch|catch|return|sizeof)\\s*\\()\n(?=\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++\\s*\\(  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\\s*\\(\n)",
			"end": "(?<=\\))(?!\\w)",
			"name": "meta.function-call.ari",
			"patterns": [
				{
					"include": "#function-call-innards"
				}
			]
		},
		"case_statement": {
			"name": "meta.conditional.case.ari",
			"begin": "((?>(?:(?:(?>(?<!\\s)\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z))))((?<!\\w)case(?!\\w))",
			"beginCaptures": {
				"1": {
					"patterns": [
						{
							"include": "#inline_comment"
						}
					]
				},
				"2": {
					"name": "comment.block.c punctuation.definition.comment.begin.ari"
				},
				"3": {
					"name": "comment.block.ari"
				},
				"4": {
					"patterns": [
						{
							"match": "\\*\\/",
							"name": "comment.block.c punctuation.definition.comment.end.ari"
						},
						{
							"match": "\\*",
							"name": "comment.block.ari"
						}
					]
				},
				"5": {
					"name": "keyword.control.case.ari"
				}
			},
			"end": "(:)",
			"endCaptures": {
				"1": {
					"name": "punctuation.separator.colon.case.ari"
				}
			},
			"patterns": [
				{
					"include": "#evaluation_context"
				},
				{
					"include": "#c_conditional_context"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"patterns": [
						{
							"patterns": [
								{
									"name": "comment.line.double-slash.documentation.ari",
									"begin": "(?:^)(?>\\s*)(\\/\\/[!\\/]+)",
									"beginCaptures": {
										"1": {
											"name": "punctuation.definition.comment.documentation.ari"
										}
									},
									"end": "(?<=\\n)(?<!\\\\\\n)",
									"patterns": [
										{
											"include": "#line_continuation_character"
										}
									]
								},
								{
									"match": "^\\/\\* =(\\s*.*?)\\s*= \\*\\/$\\n?",
									"captures": {
										"1": {
											"name": "meta.toc-list.banner.block.ari"
										}
									},
									"name": "comment.block.banner.ari"
								},
								{
									"name": "comment.block.ari",
									"begin": "(\\/\\*)",
									"beginCaptures": {
										"1": {
											"name": "punctuation.definition.comment.begin.ari"
										}
									},
									"end": "(\\*\\/)",
									"endCaptures": {
										"1": {
											"name": "punctuation.definition.comment.end.ari"
										}
									}
								},
								{
									"match": "^\\/\\/ =(\\s*.*?)\\s*=$\\n?",
									"captures": {
										"1": {
											"name": "meta.toc-list.banner.line.ari"
										}
									},
									"name": "comment.line.banner.ari"
								},
								{
									"begin": "((?:^[ \\t]+)?)(?=\\/\\/)",
									"beginCaptures": {
										"1": {
											"name": "punctuation.whitespace.comment.leading.ari"
										}
									},
									"end": "(?!\\G)",
									"patterns": [
										{
											"name": "comment.line.double-slash.ari",
											"begin": "(\\/\\/)",
											"beginCaptures": {
												"1": {
													"name": "punctuation.definition.comment.ari"
												}
											},
											"end": "(?=\\n)",
											"patterns": [
												{
													"include": "#line_continuation_character"
												}
											]
										}
									]
								}
							]
						},
						{
							"include": "#block_comment"
						},
						{
							"include": "#line_comment"
						}
					]
				},
				{
					"include": "#block_comment"
				},
				{
					"include": "#line_comment"
				}
			]
		},
		"default_statement": {
			"name": "meta.conditional.default.ari",
			"begin": "((?>(?:(?:(?>(?<!\\s)\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z))))((?<!\\w)default(?!\\w))",
			"beginCaptures": {
				"1": {
					"patterns": [
						{
							"include": "#inline_comment"
						}
					]
				},
				"2": {
					"name": "comment.block.c punctuation.definition.comment.begin.ari"
				},
				"3": {
					"name": "comment.block.ari"
				},
				"4": {
					"patterns": [
						{
							"match": "\\*\\/",
							"name": "comment.block.c punctuation.definition.comment.end.ari"
						},
						{
							"match": "\\*",
							"name": "comment.block.ari"
						}
					]
				}
			},
			"end": "(:)",
			"endCaptures": {
				"1": {
					"name": "punctuation.separator.colon.case.default.ari"
				}
			},
			"patterns": [
				{
					"include": "#evaluation_context"
				},
				{
					"include": "#c_conditional_context"
				}
			]
		},
		"evaluation_context": {
			"patterns": [
				{
					"include": "#function-call-innards"
				},
				{
					"include": "$self"
				}
			]
		},
		"function-call-innards": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#storage_types"
				},
				{
					"include": "#method_access"
				},
				{
					"include": "#member_access"
				},
				{
					"include": "#operators"
				},
				{
					"begin": "(?x)\n(?!(?:while|for|do|if|else|switch|catch|return|sizeof)\\s*\\()\n(\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\n)\n\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.ari"
						},
						"2": {
							"name": "punctuation.section.arguments.begin.bracket.round.ari"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.arguments.end.bracket.round.ari"
						}
					},
					"patterns": [
						{
							"include": "#function-call-innards"
						}
					]
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.parens.begin.bracket.round.ari"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.parens.end.bracket.round.ari"
						}
					},
					"patterns": [
						{
							"include": "#function-call-innards"
						}
					]
				},
				{
					"include": "#block_innards"
				}
			]
		},
		"function-innards": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#storage_types"
				},
				{
					"include": "#operators"
				},
				{
					"include": "#vararg_ellipses"
				},
				{
					"name": "meta.function.definition.parameters.ari",
					"begin": "(?x)\n(?!(?:while|for|do|if|else|switch|catch|return|sizeof)\\s*\\()\n(\n(?:[A-Za-z_][A-Za-z0-9_]*+|::)++  # actual name\n|\n(?:(?<=operator)(?:[-*&<>=+!]+|\\(\\)|\\[\\]))\n)\n\\s*(\\()",
					"beginCaptures": {
						"1": {
							"name": "entity.name.function.ari"
						},
						"2": {
							"name": "punctuation.section.parameters.begin.bracket.round.ari"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.parameters.end.bracket.round.ari"
						}
					},
					"patterns": [
						{
							"include": "#probably_a_parameter"
						},
						{
							"include": "#function-innards"
						}
					]
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.parens.begin.bracket.round.ari"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.parens.end.bracket.round.ari"
						}
					},
					"patterns": [
						{
							"include": "#function-innards"
						}
					]
				},
				{
					"include": "$self"
				}
			]
		},
		"inline_comment": {
			"patterns": [
				{
					"patterns": [
						{
							"match": "(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/))",
							"captures": {
								"1": {
									"name": "comment.block.c punctuation.definition.comment.begin.ari"
								},
								"2": {
									"name": "comment.block.ari"
								},
								"3": {
									"patterns": [
										{
											"match": "\\*\\/",
											"name": "comment.block.c punctuation.definition.comment.end.ari"
										},
										{
											"match": "\\*",
											"name": "comment.block.ari"
										}
									]
								}
							}
						},
						{
							"match": "(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/))",
							"captures": {
								"1": {
									"name": "comment.block.c punctuation.definition.comment.begin.ari"
								},
								"2": {
									"name": "comment.block.ari"
								},
								"3": {
									"patterns": [
										{
											"match": "\\*\\/",
											"name": "comment.block.c punctuation.definition.comment.end.ari"
										},
										{
											"match": "\\*",
											"name": "comment.block.ari"
										}
									]
								}
							}
						}
					]
				},
				{
					"match": "(\\/\\*)((?:[^\\*]|(?:\\*)++[^\\/])*+((?:\\*)++\\/))",
					"captures": {
						"1": {
							"name": "comment.block.c punctuation.definition.comment.begin.ari"
						},
						"2": {
							"name": "comment.block.ari"
						},
						"3": {
							"patterns": [
								{
									"match": "\\*\\/",
									"name": "comment.block.c punctuation.definition.comment.end.ari"
								},
								{
									"match": "\\*",
									"name": "comment.block.ari"
								}
							]
						}
					}
				}
			]
		},
		"line_comment": {
			"patterns": [
				{
					"begin": "\\s*+(\\/\\/)",
					"end": "(?<=\\n)(?<!\\\\\\n)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.comment.ari"
						}
					},
					"endCaptures": {},
					"name": "comment.line.double-slash.ari",
					"patterns": [
						{
							"include": "#line_continuation_character"
						}
					]
				},
				{
					"begin": "\\s*+(\\/\\/)",
					"end": "(?<=\\n)(?<!\\\\\\n)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.comment.ari"
						}
					},
					"endCaptures": {},
					"name": "comment.line.double-slash.ari",
					"patterns": [
						{
							"include": "#line_continuation_character"
						}
					]
				}
			]
		},
		"line_continuation_character": {
			"patterns": [
				{
					"match": "(\\\\)\\n",
					"captures": {
						"1": {
							"name": "constant.character.escape.line-continuation.ari"
						}
					}
				}
			]
		},
		"member_access": {
			"match": "((?:[a-zA-Z_]\\w*|(?<=\\]|\\)))\\s*)(?:((?:\\.\\*|\\.))|((?:->\\*|->)))((?:[a-zA-Z_]\\w*\\s*(?:(?:(?:\\.\\*|\\.))|(?:(?:->\\*|->)))\\s*)*)\\s*(\\b(?!(?:float|uint|void|char|bool|int)\\b)[a-zA-Z_]\\w*\\b(?!\\())",
			"captures": {
				"1": {
					"name": "variable.other.object.access.ari"
				},
				"2": {
					"name": "punctuation.separator.dot-access.ari"
				},
				"3": {
					"name": "punctuation.separator.pointer-access.ari"
				},
				"4": {
					"patterns": [
						{
							"include": "#member_access"
						},
						{
							"include": "#method_access"
						},
						{
							"match": "((?:[a-zA-Z_]\\w*|(?<=\\]|\\)))\\s*)(?:((?:\\.\\*|\\.))|((?:->\\*|->)))",
							"captures": {
								"1": {
									"name": "variable.other.object.access.ari"
								},
								"2": {
									"name": "punctuation.separator.dot-access.ari"
								},
								"3": {
									"name": "punctuation.separator.pointer-access.ari"
								}
							}
						}
					]
				},
				"5": {
					"name": "variable.other.member.ari"
				}
			}
		},
		"method_access": {
			"contentName": "meta.function-call.member.ari",
			"begin": "((?:[a-zA-Z_]\\w*|(?<=\\]|\\)))\\s*)(?:((?:\\.\\*|\\.))|((?:->\\*|->)))((?:[a-zA-Z_]\\w*\\s*(?:(?:(?:\\.\\*|\\.))|(?:(?:->\\*|->)))\\s*)*)\\s*([a-zA-Z_]\\w*)(\\()",
			"beginCaptures": {
				"1": {
					"name": "variable.other.object.access.ari"
				},
				"2": {
					"name": "punctuation.separator.dot-access.ari"
				},
				"3": {
					"name": "punctuation.separator.pointer-access.ari"
				},
				"4": {
					"patterns": [
						{
							"include": "#member_access"
						},
						{
							"include": "#method_access"
						},
						{
							"match": "((?:[a-zA-Z_]\\w*|(?<=\\]|\\)))\\s*)(?:((?:\\.\\*|\\.))|((?:->\\*|->)))",
							"captures": {
								"1": {
									"name": "variable.other.object.access.ari"
								},
								"2": {
									"name": "punctuation.separator.dot-access.ari"
								},
								"3": {
									"name": "punctuation.separator.pointer-access.ari"
								}
							}
						}
					]
				},
				"5": {
					"name": "entity.name.function.member.ari"
				},
				"6": {
					"name": "punctuation.section.arguments.begin.bracket.round.function.member.ari"
				}
			},
			"end": "(\\))",
			"endCaptures": {
				"1": {
					"name": "punctuation.section.arguments.end.bracket.round.function.member.ari"
				}
			},
			"patterns": [
				{
					"include": "#function-call-innards"
				}
			]
		},
		"numbers": {
			"match": "(?<!\\w)\\.?\\d(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eEpP])[+-])*",
			"captures": {
				"0": {
					"patterns": [
						{
							"begin": "(?=.)",
							"end": "$",
							"patterns": [
								{
									"match": "(\\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?:(?<=[0-9a-fA-F])\\.|\\.(?=[0-9a-fA-F])))([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?<!')([pP])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?([lLfF](?!\\w))?$",
									"captures": {
										"1": {
											"name": "keyword.other.unit.hexadecimal.ari"
										},
										"2": {
											"name": "constant.numeric.hexadecimal.ari",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"3": {
											"name": "punctuation.separator.constant.numeric"
										},
										"4": {
											"name": "constant.numeric.hexadecimal.ari"
										},
										"5": {
											"name": "constant.numeric.hexadecimal.ari",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"6": {
											"name": "punctuation.separator.constant.numeric"
										},
										"8": {
											"name": "keyword.other.unit.exponent.hexadecimal.ari"
										},
										"9": {
											"name": "keyword.operator.plus.exponent.hexadecimal.ari"
										},
										"10": {
											"name": "keyword.operator.minus.exponent.hexadecimal.ari"
										},
										"11": {
											"name": "constant.numeric.exponent.hexadecimal.ari",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"12": {
											"name": "keyword.other.unit.suffix.floating-point.ari"
										}
									}
								},
								{
									"match": "(\\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?:(?<=[0-9])\\.|\\.(?=[0-9])))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)?((?<!')([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?([lLfF](?!\\w))?$",
									"captures": {
										"2": {
											"name": "constant.numeric.decimal.ari",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"3": {
											"name": "punctuation.separator.constant.numeric"
										},
										"4": {
											"name": "constant.numeric.decimal.point.ari"
										},
										"5": {
											"name": "constant.numeric.decimal.ari",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"6": {
											"name": "punctuation.separator.constant.numeric"
										},
										"8": {
											"name": "keyword.other.unit.exponent.decimal.ari"
										},
										"9": {
											"name": "keyword.operator.plus.exponent.decimal.ari"
										},
										"10": {
											"name": "keyword.operator.minus.exponent.decimal.ari"
										},
										"11": {
											"name": "constant.numeric.exponent.decimal.ari",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"12": {
											"name": "keyword.other.unit.suffix.floating-point.ari"
										}
									}
								},
								{
									"match": "(\\G0[bB])([01](?:[01]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?:[fF])(?!\\w))?$",
									"captures": {
										"1": {
											"name": "keyword.other.unit.binary.ari"
										},
										"2": {
											"name": "constant.numeric.binary.ari",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"3": {
											"name": "punctuation.separator.constant.numeric"
										},
										"4": {
											"name": "keyword.other.unit.suffix.integer.ari"
										}
									}
								},
								{
									"match": "(\\G0)((?:[0-7]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))+)((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$",
									"captures": {
										"1": {
											"name": "keyword.other.unit.octal.ari"
										},
										"2": {
											"name": "constant.numeric.octal.ari",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"3": {
											"name": "punctuation.separator.constant.numeric"
										},
										"4": {
											"name": "keyword.other.unit.suffix.integer.ari"
										}
									}
								},
								{
									"match": "(\\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?<!')([pP])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?((?:[fF])(?!\\w))?$",
									"captures": {
										"1": {
											"name": "keyword.other.unit.hexadecimal.ari"
										},
										"2": {
											"name": "constant.numeric.hexadecimal.ari",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"3": {
											"name": "punctuation.separator.constant.numeric"
										},
										"5": {
											"name": "keyword.other.unit.exponent.hexadecimal.ari"
										},
										"6": {
											"name": "keyword.operator.plus.exponent.hexadecimal.ari"
										},
										"7": {
											"name": "keyword.operator.minus.exponent.hexadecimal.ari"
										},
										"8": {
											"name": "constant.numeric.exponent.hexadecimal.ari",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"9": {
											"name": "keyword.other.unit.suffix.integer.ari"
										}
									}
								},
								{
									"match": "(\\G0[oO])([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?<!')([pP])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?((?:[fF])(?!\\w))?$",
									"captures": {
										"1": {
											"name": "keyword.other.unit.octal.ari"
										},
										"2": {
											"name": "constant.numeric.octal.ari",
											"patterns": [
												{
													"match": "(?<=[0-7])'(?=[0-7])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"3": {
											"name": "punctuation.separator.constant.numeric"
										},
										"5": {
											"name": "keyword.other.unit.exponent.octal.ari"
										},
										"6": {
											"name": "keyword.operator.plus.exponent.octal.ari"
										},
										"7": {
											"name": "keyword.operator.minus.exponent.octal.ari"
										},
										"8": {
											"name": "constant.numeric.exponent.octal.ari",
											"patterns": [
												{
													"match": "(?<=[0-7])'(?=[0-7])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"9": {
											"name": "keyword.other.unit.suffix.integer.ari"
										}
									}
								},
								{
									"match": "(\\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)((?<!')([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])))*)))?((?:(?:(?:(?:(?:[uU]|[uU]ll?)|[uU]LL?)|ll?[uU]?)|LL?[uU]?)|[fF])(?!\\w))?$",
									"captures": {
										"2": {
											"name": "constant.numeric.decimal.ari",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"3": {
											"name": "punctuation.separator.constant.numeric"
										},
										"5": {
											"name": "keyword.other.unit.exponent.decimal.ari"
										},
										"6": {
											"name": "keyword.operator.plus.exponent.decimal.ari"
										},
										"7": {
											"name": "keyword.operator.minus.exponent.decimal.ari"
										},
										"8": {
											"name": "constant.numeric.exponent.decimal.ari",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])'(?=[0-9a-fA-F])",
													"name": "punctuation.separator.constant.numeric"
												}
											]
										},
										"9": {
											"name": "keyword.other.unit.suffix.integer.ari"
										}
									}
								},
								{
									"match": "(?:(?:[0-9a-zA-Z_\\.]|')|(?<=[eEpP])[+-])+",
									"name": "invalid.illegal.constant.numeric"
								}
							]
						}
					]
				}
			}
		},
		"operators": {
			"patterns": [
				{
					"match": "->",
					"name": "keyword.control.return_symbol.ari"
				},
				{
					"match": "(?<![\\w$])(sizeof)(?![\\w$])",
					"name": "keyword.operator.sizeof.ari"
				},
				{
					"match": "--",
					"name": "keyword.operator.decrement.ari"
				},
				{
					"match": "\\+\\+",
					"name": "keyword.operator.increment.ari"
				},
				{
					"match": "%=|\\+=|-=|\\*=|(?<!\\()/=",
					"name": "keyword.operator.assignment.compound.ari"
				},
				{
					"match": "&=|\\^=|<<=|>>=|\\|=",
					"name": "keyword.operator.assignment.compound.bitwise.ari"
				},
				{
					"match": "<<|>>",
					"name": "keyword.operator.bitwise.shift.ari"
				},
				{
					"match": "!=|<=|>=|==|<|>",
					"name": "keyword.operator.comparison.ari"
				},
				{
					"match": "&&|!|\\|\\|",
					"name": "keyword.operator.logical.ari"
				},
				{
					"match": "&|\\||\\^|~",
					"name": "keyword.operator.ari"
				},
				{
					"match": "=",
					"name": "keyword.operator.assignment.ari"
				},
				{
					"match": "%|\\*|/|-|\\+",
					"name": "keyword.operator.ari"
				},
				{
					"begin": "(\\?)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.ternary.ari"
						}
					},
					"end": "(:)",
					"endCaptures": {
						"1": {
							"name": "keyword.operator.ternary.ari"
						}
					},
					"patterns": [
						{
							"include": "#function-call-innards"
						},
						{
							"include": "$self"
						}
					]
				}
			]
		},
		"parens": {
			"name": "meta.parens.ari",
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.parens.begin.bracket.round.ari"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.parens.end.bracket.round.ari"
				}
			},
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		"parens-block": {
			"name": "meta.parens.block.ari",
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.parens.begin.bracket.round.ari"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.parens.end.bracket.round.ari"
				}
			},
			"patterns": [
				{
					"include": "#block_innards"
				},
				{
					"match": "(?-mix:(?<!:):(?!:))",
					"name": "punctuation.range-based.ari"
				}
			]
		},
		"probably_a_parameter": {
			"match": "(?<=(?:[a-zA-Z_0-9] |[&*>\\]\\)]))\\s*([a-zA-Z_]\\w*)\\s*(?=(?:\\[\\]\\s*)?(?:,|\\)))",
			"captures": {
				"1": {
					"name": "variable.parameter.probably.ari"
				}
			}
		},
		"storage_types": {
			"patterns": [
				{
					"match": "(?-mix:(?<!\\w)(?:float|void|char|bool|int|uint)(?!\\w))",
					"name": "storage.type.built-in.primitive.ari"
				},
				{
					"match": "(?-mix:\\b(enum|struct)\\b)",
					"name": "storage.type.$1.ari"
				}
			]
		},
		"string_escaped_char": {
			"patterns": [
				{
					"match": "(?x)\\\\ (\n\\\\\t\t\t |\n[abefnprtv'\"?]   |\n[0-3]\\d{,2}\t |\n[4-7]\\d?\t\t|\nx[a-fA-F0-9]{,2} |\nu[a-fA-F0-9]{,4} |\nU[a-fA-F0-9]{,8} )",
					"name": "constant.character.escape.ari"
				},
				{
					"match": "\\\\.",
					"name": "invalid.illegal.unknown-escape.ari"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.ari"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.ari"
						}
					},
					"name": "string.quoted.double.ari",
					"patterns": [
						{
							"include": "#string_escaped_char"
						},
						{
							"include": "#line_continuation_character"
						}
					]
				},
				{
					"begin": "'",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.ari"
						}
					},
					"end": "'",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.ari"
						}
					},
					"name": "string.quoted.single.ari",
					"patterns": [
						{
							"include": "#string_escaped_char"
						},
						{
							"include": "#line_continuation_character"
						}
					]
				}
			]
		},
		"switch_conditional_parentheses": {
			"name": "meta.conditional.switch.ari",
			"begin": "((?>(?:(?:(?>(?<!\\s)\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z))))(\\()",
			"beginCaptures": {
				"1": {
					"patterns": [
						{
							"include": "#inline_comment"
						}
					]
				},
				"2": {
					"name": "comment.block.c punctuation.definition.comment.begin.ari"
				},
				"3": {
					"name": "comment.block.ari"
				},
				"4": {
					"patterns": [
						{
							"match": "\\*\\/",
							"name": "comment.block.c punctuation.definition.comment.end.ari"
						},
						{
							"match": "\\*",
							"name": "comment.block.ari"
						}
					]
				},
				"5": {
					"name": "punctuation.section.parens.begin.bracket.round.conditional.switch.ari"
				}
			},
			"end": "(\\))",
			"endCaptures": {
				"1": {
					"name": "punctuation.section.parens.end.bracket.round.conditional.switch.ari"
				}
			},
			"patterns": [
				{
					"include": "#evaluation_context"
				},
				{
					"include": "#c_conditional_context"
				}
			]
		},
		"switch_statement": {
			"name": "meta.block.switch.ari",
			"begin": "(((?>(?:(?:(?>(?<!\\s)\\s+)|(\\/\\*)((?>(?:[^\\*]|(?>\\*+)[^\\/])*)((?>\\*+)\\/)))+|(?:(?:(?:(?:\\b|(?<=\\W))|(?=\\W))|\\A)|\\Z))))((?<!\\w)switch(?!\\w)))",
			"beginCaptures": {
				"1": {
					"name": "meta.head.switch.ari"
				},
				"2": {
					"patterns": [
						{
							"include": "#inline_comment"
						}
					]
				},
				"3": {
					"name": "comment.block.c punctuation.definition.comment.begin.ari"
				},
				"4": {
					"name": "comment.block.ari"
				},
				"5": {
					"patterns": [
						{
							"match": "\\*\\/",
							"name": "comment.block.c punctuation.definition.comment.end.ari"
						},
						{
							"match": "\\*",
							"name": "comment.block.ari"
						}
					]
				},
				"6": {
					"name": "keyword.control.switch.ari"
				}
			},
			"end": "(?:(?<=\\}|%>|\\?\\?>)|(?=[;>\\[\\]=]))",
			"patterns": [
				{
					"name": "meta.head.switch.ari",
					"begin": "\\G ?",
					"end": "((?:\\{|<%|\\?\\?<|(?=;)))",
					"endCaptures": {
						"1": {
							"name": "punctuation.section.block.begin.bracket.curly.switch.ari"
						}
					},
					"patterns": [
						{
							"include": "#switch_conditional_parentheses"
						},
						{
							"include": "$self"
						}
					]
				},
				{
					"name": "meta.body.switch.ari",
					"begin": "(?<=\\{|<%|\\?\\?<)",
					"end": "(\\}|%>|\\?\\?>)",
					"endCaptures": {
						"1": {
							"name": "punctuation.section.block.end.bracket.curly.switch.ari"
						}
					},
					"patterns": [
						{
							"include": "#default_statement"
						},
						{
							"include": "#case_statement"
						},
						{
							"include": "$self"
						},
						{
							"include": "#block_innards"
						}
					]
				},
				{
					"name": "meta.tail.switch.ari",
					"begin": "(?<=\\}|%>|\\?\\?>)[\\s\\n]*",
					"end": "[\\s\\n]*(?=;)",
					"patterns": [
						{
							"include": "$self"
						}
					]
				}
			]
		},
		"vararg_ellipses": {
			"match": "(?<!\\.)\\.\\.\\.(?!\\.)",
			"name": "punctuation.vararg-ellipses.ari"
		}
	}
}